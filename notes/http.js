// 1.OSI七层模型：
// 物理层，例如网线，电缆，wifi无线电波，传输的二进制数据
// 数据链路层，例如网卡，交换机。保证数据的可靠传输，防止数据丢失和顺坏，并负责错误检测和纠正
// 网络层，路由器工作在这一次，常用IP协议，负责数据包的路由选择和转发。
// 传输层，TCP，UDP协议，提供可靠的端对端的数据传输服务
// 会话层 管理应用程序之间的会话，控制会话的建立、维护和终止。
// 表示层 数据的格式化和加密解密。它处理数据的表示形式和数据压缩等操作。SSL/TLS
// 应用层 http，通过tcp连接建立的

// TCP：面向连接的协议，提供可靠数据传输，但是速度慢。
// 三次握手
// 第一次：客户端发送SYN，请求建立连接。
// 第二次：服务器回复SYN+ACK，表示同意建立连接。
// 第三次：客户端回复ACK，连接建立成功。

// 四次挥手
// 第一次：客户端发送FIN，表示请求关闭连接。
// 第二次：服务器回复ACK，表示收到关闭请求，但仍然继续发送数据。
// 第三次：服务器发送FIN，表示没有数据要发送，准备关闭连接。
// 第四次：客户端回复ACK，连接关闭。

// 可靠性机制
// TCP通过流量控制、拥塞控制、重传机制等保证数据传输的可靠性，确保数据按顺序到达，防止丢失或乱序。

// UDP:无连接的协议，数据不可靠，数据可能丢失或者乱序，不需要建立连接，但是速度快。缺乏流量控制和错误校验。
// 无连接，不保证顺序和可靠性

// HTTP：应用层协议，通过TCP连接建立的
// SSL/TLS：加密协议，和http结合成https
// TLS是SSL的后续版本

// HTTP请求：强烈建议使用https
// GET请求，幂等性，安全性。没有请求体 ，多次指向同一个get不会修改服务器状态，也不会对服务器资源造成更改。请求可以被缓存，以提高性能
// POST请求，没有幂等性，数据不通过url进行传输，通过请求体进发送数据，相对安全。POST请求一般不进行缓存。
// PUT请求，更新数据，通常是替换，幂等性，通过请求体进行传输
// DELETE请求，幂等性，没有请求体，通过url
// PATCH请求，修改部分数据，不是幂等的，有请求体
// HEAD请求只返回响应头，和GET类似，幂等

// HTTP的缓存控制
// 用于减少重复的网络请求，减少延迟和带宽的消耗。
// 主要作用于响应体，也有缓存请求的情况，例如请求头的缓存和重用。

// HTTP/1.x和HTTP2的主要区别
// HTTP1每一个请求都是独立的TCP连接，一个请求完成后才能发送下一个请求，而HTTP2引入了多路复用，允许同一个TCP连接上同时并行多个请求和响应，不会相互阻塞。
// HTTP1中的请求头和响应头都是纯文本的形式传输的，每个请求和响应都要重复传输完整的头部信息，会造成不必要的带宽浪费。HTTP2引入了HPACK压缩算法来对请求和响应头进行压缩，减少了头部信息的传输量，提高了传输效率。

